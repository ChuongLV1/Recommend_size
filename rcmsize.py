import pandas as pd
import joblib
import numpy as np

# Load m√¥ h√¨nh v√† label encoder
pipeline = joblib.load("../Recommend_size/rf_full_pipeline.pkl")
label_encoder = joblib.load("../Recommend_size/rf_full_label_encoder.pkl")

# Gi√° tr·ªã trung b√¨nh c·ªßa c√°c feature c√≤n l·∫°i theo gi·ªõi t√≠nh
mean_values = {
    'nam': {
        'chest': 100,
        'waist': 90,
        'shoulder': 60
    },
    'n·ªØ': {
        'chest': 110,
        'waist': 80,
        'shoulder': 60
    }
}

def predict_size(height, weight, gender, chest=None, waist=None, shoulder=None):
    gender = gender.strip().lower()
    
    if gender not in mean_values:
        raise ValueError("Gi·ªõi t√≠nh ph·∫£i l√† 'nam' ho·∫∑c 'n·ªØ'.")

    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu b·∫±ng trung b√¨nh theo gi·ªõi t√≠nh
    chest = chest if chest is not None else mean_values[gender]['chest']
    waist = waist if waist is not None else mean_values[gender]['waist']
    shoulder = shoulder if shoulder is not None else mean_values[gender]['shoulder']
    
    # T√≠nh BMI
    BMI = weight / ((height / 100) ** 2)

    # T·∫°o dataframe cho input
    input_df = pd.DataFrame([{
        'height': height,
        'weight': weight,
        'chest': chest,
        'waist': waist,
        'shoulder': shoulder,
        'gender': gender,
        'BMI': BMI
    }])

    # D·ª± ƒëo√°n
    pred_encoded = pipeline.predict(input_df)[0]
    pred_label = label_encoder.inverse_transform([pred_encoded])[0]
    return pred_label

# Ch·∫°y local b·∫±ng giao di·ªán d√≤ng l·ªánh
if __name__ == "__main__":
    try:
        height = float(input("Nh·∫≠p chi·ªÅu cao (cm): "))
        weight = float(input("Nh·∫≠p c√¢n n·∫∑ng (kg): "))
        gender = input("Nh·∫≠p gi·ªõi t√≠nh (Nam/N·ªØ): ").strip().lower()

        if gender not in ['nam', 'n·ªØ', 'male', 'female']:
            print("‚ö†Ô∏è Gi·ªõi t√≠nh kh√¥ng h·ª£p l·ªá. Ch·ªâ ch·∫•p nh·∫≠n: Nam/N·ªØ ho·∫∑c male/female.")
        else:
            # C√°c input t√πy ch·ªçn
            chest_input = input("Nh·∫≠p chi·ªÅu d√†i l∆∞ng (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            waist_input = input("Nh·∫≠p v√≤ng ng·ª±c (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            shoulder_input = input("Nh·∫≠p ngang vai (cm, t√πy ch·ªçn, Enter n·∫øu b·ªè qua): ").strip()
            # Chuy·ªÉn ƒë·ªïi n·∫øu c√≥
            chest = float(chest_input) if chest_input else None
            shoulder = float(shoulder_input) if shoulder_input else None
            waist = float(waist_input) if waist_input else None

            # D·ª± ƒëo√°n
            result = predict_size(height, weight, gender, chest, waist, shoulder)
            print(f"\nüéØ Recommended size: {result}")
    except Exception as e:
        print("‚ùå L·ªói khi nh·∫≠p ho·∫∑c x·ª≠ l√Ω d·ªØ li·ªáu:", e)